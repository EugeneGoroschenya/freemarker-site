<?xml version="1.0"?>
<page title="Overview">
<sections>
  <section title="News">

    <section title="21 June 2015: FreeMarker 2.3.23 Release Candidate 1 is available">
      <p>Test it, and give feedback! Final release is planned for July the 5th.</p>
      <p>
        A quick overview of the most important changes (see full documentation <a href="http://sourceforge.net/projects/freemarker/files/freemarker/2.3.23-rc01/freemarker-2.3.23-rc01.tar.gz/download">in the downloadable distribution</a>):
      </p>
      <ul>
        <li>
          Listing-related (<tt>#list</tt>) specialized convenience features that target some of the most typical tasks in templates:
          <ul>
            <li>New <tt>list</tt> directive child directives, <tt>else</tt> and <tt>items</tt> deal with the special cases with 0-length lists. <tt>sep</tt> makes inserting separators between items much easier than it was with <tt>if</tt> + <tt><i>var</i>_has_next</tt>.</li>
            <li>New built-ins that act on loop variables:
            <tt><i>var</i>?index</tt> (deprecates <tt><i>var</i>_index</tt>), <tt><i>var</i>?counter</tt> (1-based index),
            <tt><i>var</i>?has_next</tt> (deprecates <tt><i>var</i>_has_next</tt>),
            <tt><i>var</i>?item_parity</tt> (returns <tt>"odd"</tt> or <tt>"even"</tt>),
            <tt><i>var</i>?item_cycle("lightRow", "darkRow")</tt>, and some more.
            </li>
          </ul>
        </li>
        <li>Convenience assignment operators, like in <tt>&lt;#assign counter++></tt> and <tt>&lt;#assign counter += 2></tt></li>
        <li>True ternary operator equivalent: <tt><i>someBoolean</i>?then(<i>whenTrue</i>, <i>whenFalse</i>)</tt></li>
        <li>Switch as expression: <tt>someValue?switch(<i>case1</i>, <i>result1</i>, <i>case2</i>, <i>result2</i>, ... <i>caseN</i>, <i>resultN</i>, <i>defaultResult</i>)</tt></li>
        <li>FTL now supports camel case for the identifiers that are part of the template language. For example, <tt>&lt;#noEscape>${x?upperCase}&lt;/#noEscape></tt> or <tt>&lt;#setting numberFormat="0.0"></tt> or <tt>&lt;#ftl stripText=true></tt> are valid. You can just start using camel case without configuring anything, however, within the same template, FreeMarker will require you to use the same naming convention for all identifiers that are part of the template language. (Also, a certain naming convention can be enforced for all templates from configuration.)</li>
        <li>More configurable template loading for <tt>FreemarkerServlet</tt>, also loading from Servlet 3.0 <tt>META-INF/resources</tt> now works as expected</li>
        <li>Various bugfixes</li>
      </ul>
      <p><a href="http://sourceforge.net/projects/freemarker/files/freemarker/2.3.23-rc01/freemarker-2.3.23-rc01.tar.gz/download">You can download FreeMarker 2.3.23-rc01 here...</a>
      (Binary-only for Google App Engine is <a href="http://sourceforge.net/projects/freemarker/files/freemarker/2.3.23-rc01/freemarker-gae-2.3.23-rc01.jar/download">here...</a>)</p>
    </section>
  
    <section title="29 December 2014: Online FreeMarker template tester">
      <p>
        Here's a simple but useful online FreeMarker template tester page, thanks to Nir Feldman of Kenshoo:
        <a href="http://freemarker-online.kenshoo.com/">http://freemarker-online.kenshoo.com/</a>
      </p>
    </section>
  
    <section title="1 March 2015: FreeMarker 2.3.22 was released">
      <p>
        See the <a href="docs/versions_2_3_22.html">change log here!</a> A quick overview of the most important areas:
      </p>
      <ul>
        <li><tt>DefaultObjectWrapper</tt> improvements (mostly on the field of <tt>Map</tt> and <tt>List</tt> wrapping), enabled by <tt>incompatible_improvements</tt> 2.3.22.</li>
        <li>Improved <tt>FreemarkerServlet</tt> (mostly on the field of TLD discovery options and error message quality)</li>
        <li>More customizable template loading (lookup) mechanism, like customizing how localized variation names look, or using a custom lookup condition</li>
        <li>Support for using minus sign, colon and dot in any identifiers after a preceding backslash (like in <tt>&lt;@myMacro data\-id=prod.id /&gt;</tt>)</li>
        <li>A new built-in for accessing the Java API of an object behind the object wrapping façade (disabled by default). For example, <tt>myMap?api.myBusinessProperty</tt>
        translates to <tt>myMap.getMyBusinessProperty()</tt> in Java, while <tt>myMap.myBusinessProperty</tt> would translate to <tt>myMap.get("myBusinessProperty")</tt>.</li>
        <li>New options to control logging</li>
        <li><a href="docs/versions_2_3_22.html">See many more here...</a></li>
      </ul>
      <p><a href="http://sourceforge.net/projects/freemarker/files/freemarker/2.3.22/freemarker-2.3.22.tar.gz/download">You can download FreeMarker 2.3.22 here...</a>
      (Binary-only for Google App Engine is <a href="http://sourceforge.net/projects/freemarker/files/freemarker/2.3.22/freemarker-gae-2.3.22.jar/download">here...</a>)</p>
    </section>
  
    <section title="29 December 2014: Online FreeMarker template tester">
      <p>
        Here's a simple but useful online FreeMarker template tester page, thanks to Nir Feldman of Kenshoo:
        <a href="http://freemarker-online.kenshoo.com/">http://freemarker-online.kenshoo.com/</a>
      </p>
    </section>
      
  </section>
  
  <section title="What is FreeMarker?">
    <p>
      FreeMarker is a "template engine"; a generic tool to generate
      text output (anything from HTML to autogenerated source code) based on templates.
      It's a Java package, a class library for Java programmers. It's not an
      application for end-users in itself, but something that programmers can embed into their
      products.
    </p>
    <p>
      FreeMarker is designed to be practical for the generation of
      <em>HTML Web pages</em>, particularly by servlet-based applications
      following the <em>MVC</em> (Model View Controller) pattern.
      The idea behind using the MVC pattern for dynamic Web pages is that
      you separate the designers (HTML authors) from the programmers.
      Everybody works on what they are good at. Designers can change the
      appearance of a page without programmers having to change or recompile code,
      because the application logic (Java programs) and page design
      (FreeMarker templates) are separated. Templates do not become polluted 
      with complex program fragments. This separation is useful even for projects
      where the programmer and the HTML page author is the same person, since it helps
      to keep the application clear and easily maintainable.
    </p>
    <p>
      Although FreeMarker has some programming capabilities, it is <em>not</em> 
      a full-blown programming language like PHP. Instead, Java programs
      prepare the data to be displayed (like issue SQL queries), and FreeMarker
      just generates textual pages that display the prepared data using templates.
    </p>
    <center><img src="images/overview.png" alt="Overview of FreeMarker workflow"/></center>
    <p>
      FreeMarker is <em>not</em> a Web application framework. It is suitable as a
      component in a Web application framework, but the FreeMarker engine itself knows
      nothing about HTTP or servlets. It simply generates text. As such, it is perfectly
      usable in non-web application environments as well. Note, however, that we provide
      out-of-the-box solutions for using FreeMarker as the view component of Model 2
      frameworks (e.g. Struts), which also let you use JSP taglibs in the templates.
    </p>
    <p>
      FreeMarker is <a href="http://www.fsf.org/philosophy/free-sw.html">Free</a> software,
      licensed under the Apache License, Version 2.0.
      See the license <a href="docs/app_license.html">here...</a>
    </p>
    <p>
      Read more <a href="features.html">feature highlights</a>.
    </p>
  </section>
</sections>
</page>
